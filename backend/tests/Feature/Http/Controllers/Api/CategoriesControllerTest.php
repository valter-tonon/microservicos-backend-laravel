<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Models\Category;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\TestResponse;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Tests\Traits\TestSaves;
use Tests\Traits\TestValidtions;

class CategoriesControllerTest extends TestCase
{
    use DatabaseMigrations, TestValidtions, TestSaves;

    protected $category;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->category = factory(Category::class)->create();
        $this->getMockForAbstractClass();

    }

    public function testIndex()
    {
        $response = $this->get(route('categories.index'));

        $response->assertStatus(200)
                 ->assertJson([$this->category->toArray()]);

    }

    public function testShow()
    {
        $response = $this->get(route('categories.show', [$this->category->id]));

        $response
            ->assertStatus(200)
            ->assertJson($this->category->toArray());

    }

    public function testInvalidationData()
    {
        $data = [
            'name' => ''
        ];
        $this->assertInvalidationInStoreAction($data, 'required');
        $this->assertInvalidationInUpdateAction($data, 'required');

        $data = [
            'name' => str_repeat('a', 256)
        ];
        $this->assertInvalidationInStoreAction($data, 'max.string', ['max'=> 255]);
        $this->assertInvalidationInUpdateAction($data, 'max.string', ['max'=> 255]);
//        $data = [
//            'is_active' => 'false'
//        ];
//        $this->assertInvalidationInStoreAction($data, 'boolean');
//        $this->assertInvalidationInUpdateAction($data, 'boolean');

    }

    public function testStore()
    {
        $data = [
            'name' => 'teste',
            'description' => 'teste Description'
        ];
        $response = $this->assertStore($data, $data + ['deleted_at' => null, 'is_active' => 1 ]);
        $response->assertJsonStructure([
            'created_at', 'updated_at'
        ]);
        $data = [
            'name' => 'test',
            'description' => 'description',
            'is_active' => 0
        ];
        $this->assertStore($data, $data + ['description' => 'description', 'is_active' => false ]);

    }

    public function testUpdate()
    {
        $this->category = factory(Category::class)->create([
            'name' => 'test',
            'description' => 'description',
            'is_active' => false
        ]);
        $data = [
            'name' => 'test',
            'description' => 'teste',
            'is_active' => true
        ];
        $response = $this->assertUpdate($data, $data + ['deleted_at' => null]);
        $response->assertJsonStructure(['created_at', 'updated_at']);

        $data = [
            'name' => 'test',
            'description' => 52,
            'is_active' => true
        ];
        $this->assertUpdate($data, array_merge($data, ['description' => 52]));

    }

    public function testDelete()
    {

        $response = $this->delete(route('categories.destroy',
            ['category' => $this->category->id]));
        $response
            ->assertStatus(204);
        $this->assertNull(Category::find($this->category->id));

    }

    protected function routeStore()
    {
        return route('categories.store');
    }
    protected function routeUpdate()
    {
        return route( 'categories.update', ['category' => $this->category]);
    }

    protected function model()
    {
        return Category::class;
    }

}
